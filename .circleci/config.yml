# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2

# defaults
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/node:12-browsers

# env
set_env: &set_env
  name: Setup Environment Variables
  command: |
    if [[ $CIRCLE_PULL_REQUEST ]]
    then
      echo 'Fetching Base Commit from GitHub'
      echo 'export CIRCLE_PR_NUMBER="${CIRCLE_PR_NUMBER:-${CIRCLE_PULL_REQUEST##*/}}"' >> $BASH_ENV
      source $BASH_ENV
      echo "export CIRCLE_PR_BASE_SHA=`curl -s https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/pulls/${CIRCLE_PR_NUMBER} | jq -r '.base.sha'`" >> $BASH_ENV
      echo 'export AFFECTED_ARGS="--base ${CIRCLE_PR_BASE_SHA}"' >> $BASH_ENV
    else
      echo 'Fetching Base Commit from Deploy Cache'
      if [[ ! -f dist/last-deploy.txt ]]
      then
        mkdir dist && git rev-parse HEAD~1 > dist/last-deploy.txt
      fi
      echo 'export AFFECTED_ARGS="--base $(cat dist/last-deploy.txt)"' >> $BASH_ENV
    fi
    source $BASH_ENV
    echo $AFFECTED_ARGS

# cache
restore_yarn_cache: &restore_yarn_cache
  keys:
    - node-deps-node12-{{ checksum "yarn.lock" }}
    - node-deps-node12-

save_yarn_cache: &save_yarn_cache
  key: node-deps-node12-{{ checksum "yarn.lock" }}
  paths:
    - ~/.cache
    - node_modules

save_build_cache: &save_build_cache
  key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}
  paths:
    - dist

restore_build_cache: &restore_build_cache
  key: build-{{ .Environment.CIRCLE_WORKFLOW_ID }}

save_deploy_cache: &save_deploy_cache
  key: last-deploy-sha
  paths:
    - dist/last-deploy.txt

restore_deploy_cache: &restore_deploy_cache
  key: last-deploy-sha

# install
yarn_install: &yarn_install
  name: Install Dependencies
  command: yarn install --frozen-lockfile --non-interactive --ignore-scripts

# build
build: &build
  name: Build
  command: yarn affected:build -- ${AFFECTED_ARGS} --parallel -- --configuration production

# format
format: &format
  name: format
  command: yarn format:check ${AFFECTED_ARGS}

# lint
lint: &lint
  name: lint
  command: ./node_modules/.bin/nx workspace-lint && yarn affected:lint ${AFFECTED_ARGS} --parallel

# check_lodash
check_lodash: &check_lodash
  name: Check Lodash Import
  command: node ./dist/tools/checks/command lodash ${AFFECTED_ARGS}

test: &test
  name: test
  command: yarn affected:test ${AFFECTED_ARGS} --parallel --ci --code-coverage

# e2e
e2e: &e2e
  name: e2e
  command: yarn affected:e2e ${AFFECTED_ARGS} --configuration production --headless

# coverage
coverage: &coverage
  name: coverage
  command: bash <(curl -s https://codecov.io/bash)

# artifacts
store_artifacts_coverage: &store_artifacts_coverage
  prefix: coverage
  path: coverage

store_artifacts_cypress: &store_artifacts_cypress
  prefix: cypress
  path: dist/cypress

store_artifacts_dist: &store_artifacts_dist
  prefix: dist
  path: dist

# jobs
jobs:
  check:
    <<: *defaults
    steps:
      - checkout
      - run: *set_env
      - restore_cache: *restore_yarn_cache
      - run: *yarn_install
      - save_cache: *save_yarn_cache
      - restore_cache: *restore_deploy_cache
      - run: *format
      - run: *build
      - run: *lint
      - run: *test
      - save_cache: *save_build_cache
      - store_artifacts: *store_artifacts_dist
      - run: *coverage
      # - run: *e2e
      - store_artifacts: *store_artifacts_coverage
      - store_artifacts: *store_artifacts_cypress
  deploy:
      <<: *defaults
      steps:
        - checkout
        - restore_cache: *restore_deploy_cache
        - run: *set_env
        - restore_cache: *restore_yarn_cache
        - restore_cache: *restore_build_cache
        - run: yarn affected -- --target deploy ${AFFECTED_ARGS}
        - run: git rev-parse HEAD > dist/last-deploy.txt
        - save_cache: *save_deploy_cache

workflows:
  version: 2
  check:
    jobs:
      - check:
          filters:
            branches:
              ignore:
                - i10n
      # - deploy:
      #     filters:
      #       branches:
      #         only:
      #           - master
      #     requires:
      #       - check
